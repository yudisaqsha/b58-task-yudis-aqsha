// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  fullName  String?
  bio       String?
  password  String
  avatar    String?
  coverPic  String?
  isDeleted Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  threads   Thread[]
  likes     Like[]
  comments  Comment[]
  following Follow[]  @relation("Following")
  followers Follow[]  @relation("Followers")
}

model Thread {
  id        Int       @id @default(autoincrement())
  content   String
  authorId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    Users     @relation(fields: [authorId], references: [id])
  image     String?
  image_url String?
  likes     Like[]
  comments  Comment[]
  isDeleted Int       @default(0)
}

model Follow {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  createdAt   DateTime @default(now())

  follower  Users @relation("Followers", fields: [followerId], references: [id])
  following Users @relation("Following", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Like {
  id        Int      @id @default(autoincrement())
  userId    Int
  threadId  Int
  createdAt DateTime @default(now())

  user   Users  @relation(fields: [userId], references: [id])
  thread Thread @relation(fields: [threadId], references: [id])

  @@unique([userId, threadId]) // A user can like a thread only once
}

model Comment {
  id           Int      @id @default(autoincrement())
  content      String
  authorId     Int
  threadId     Int
  imagecomment String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  author       Users    @relation(fields: [authorId], references: [id])
  thread       Thread   @relation(fields: [threadId], references: [id])
  isDeleted    Int      @default(0)
}
